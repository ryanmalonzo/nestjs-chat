services:
  db:
    image: postgres:17
    container_name: nestjs-chat-db
    ports:
      - "5432:5432"
    volumes:
      - "db-data:/var/lib/postgresql/data"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-esgi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-esgi}
      POSTGRES_DB: ${POSTGRES_DB:-esgi}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-esgi}"]
      interval: 2s
      timeout: 10s
      retries: 3

  adminer:
    image: adminer
    container_name: nestjs-chat-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DESIGN: pepa-linha
    depends_on:
      db:
        condition: service_healthy

  minio:
    image: quay.io/minio/minio
    container_name: nestjs-chat-minio
    command: 'server /data --console-address ":9001"'
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "minio-data:/data"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 2s
      timeout: 10s
      retries: 3

  # Create the nestjs-chat bucket automatically
  create-minio-bucket:
    image: minio/mc # Use the MinIO Client image
    container_name: nestjs-chat-minio-mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin};
      /usr/bin/mc mb myminio/nestjs-chat || true;
      /usr/bin/mc anonymous set download myminio/nestjs-chat;
      echo 'MinIO bucket created or already exists: nestjs-chat';
      echo 'MinIO bucket policy set to public for downloads';
      exit 0;
      "

volumes:
  db-data:
  minio-data:

